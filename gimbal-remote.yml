
substitutions:
  node_name: gimbal-remote2
  device_verbose_name: "Gimbal Remote2"
  ip_suffix: "47"
  ap_password: "y0ltlm7Rryim"
  board_type: esp32dev
  pan_id: pan_value
  pan_name: Pan
  tilt_id: tilt_value
  tilt_name: Tilt

packages:
  device_base: !include common/device_base.yml
  wifi: !include common/wifi.yml
  remote_servo: !include common/remote_servo.yml

# https://esphome.io/index.html#
esphome:
  includes:
    # - esp32-custom/src/arduino_port_expander

# Enable Home Assistant API
api:
  encryption:
    key: "THGSFcmxAmRLb5PSvpDS7nEBZCeYwe2x+24T0x2OyEw="
  password: ""

sensor:
  - platform: rotary_encoder
    name: "Remote Rotary"
    id: remote_rotary
    pin_a:
      number: GPIO16
      inverted: true
      mode:
        input: true
    pin_b:
      number: GPIO17
      inverted: true
      mode:
        input: true
        pullup: true
    unit_of_measurement: "Â°"
    # resolution: 1
    restore_mode: ALWAYS_ZERO
    # min_value: 0.0
    # max_value: 180.0
    publish_initial_value: true
    # filters:
    #   - throttle: 1s
    on_value:
      then:
        - if:
            condition:
              switch.is_on: remote_gimbal_switch
            then:
              - number.set:
                  id: $pan_id
                  value: !lambda |-
                    float previous = id(remote_rotary_previous);
                    id(remote_rotary_previous) = x; 
                    ESP_LOGD("glow-remote pan",
                            "x=%f, previous=%f dif=%f", x, previous, x-previous);
                    return x-previous;
            else:
              - number.set:
                  id: $tilt_id
                  value: !lambda |-
                    float previous = id(remote_rotary_previous);
                    id(remote_rotary_previous) = x; 
                    ESP_LOGD("glow-remote tilt",
                            "x=%f, previous=%f dif=%f", x, previous, x-previous);
                    return x-previous;

switch:
  - platform: template
    id: remote_gimbal_switch
    name: "Remote Gimbal Switch"
    optimistic: true

binary_sensor:
  - platform: gpio
    name: "Remote Toggle Button"
    id: remote_toggle_button
    pin:
      number: GPIO5
      mode:
        input: true
    on_press:
      then:
        - switch.toggle: remote_gimbal_switch
    