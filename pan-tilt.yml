substitutions:
  node_name: pan-tilt
  device_verbose_name: "Pan/Tilt Controller"
  ip_suffix: "144"
  tilt_name: Tilt
  tilt_id: tilt_value
  tilt_gpio: GPIO26
  pan_name: Pan
  pan_id: pan_value
  pan_gpio: GPIO25
  ap_password: "y0ltlm7Rryim"
  board_type: esp32dev

packages:
  wifi: !include common/wifi.yml
  device_base: !include common/device_base.yml
  pan_slider: !include common/pantilt-control.yml

sensor:
  - platform: rotary_encoder
    name: "Gimbal Rotary"
    id: 'rotary2'
    pin_a:
      number: GPIO19
      inverted: true
      mode:
        input: true
    pin_b:
      number: GPIO18
      inverted: true
      mode:
        input: true
        pullup: true
    min_value: 0
    max_value: 180
    unit_of_measurement: "Â°"
    publish_initial_value: true

    on_value:
      then:
        - if:
            condition:
              switch.is_on: gimbal_toggle
            then:
              - number.set:
                  id: $pan_id
                  value: !lambda |-
                    return x;
            else:
              - number.set:
                  id: $tilt_id
                  value: !lambda |-
                        return x;

globals:
  - id: rotary_save
    type: float
    restore_value: no  # Strings cannot be saved/restored
    initial_value: '0.0'

switch:
  - platform: template
    id: gimbal_toggle
    name: "Gimbal Toggle Switch"
    optimistic: true
    on_turn_on: 
      then:
        - sensor.rotary_encoder.set_value:
            id: rotary2
            value: !lambda |-
                float s = id(rotary_save);
                id(rotary_save) = id($tilt_id).state; 
                return s;
    on_turn_off: 
      then:
        - sensor.rotary_encoder.set_value:
            id: rotary2
            value: !lambda |-
                int s = id(rotary_save);
                id(rotary_save) = id($pan_id).state; 
                return s;

binary_sensor:
  - platform: gpio
    name: "Gimbal Toggle Button"
    pin:
      number: GPIO5
      mode:
        input: true
    on_press:
      then:
        - switch.toggle: gimbal_toggle
    